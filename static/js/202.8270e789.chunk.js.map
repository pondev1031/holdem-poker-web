{"version":3,"file":"static/js/202.8270e789.chunk.js","mappings":"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","sources":["pages/auth/login.tsx","sections/auth/login-view.tsx","sections/auth/register-view.tsx"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\n// sections\nimport { LoginView } from 'src/sections/auth';\n\n// ----------------------------------------------------------------------\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Login</title>\n      </Helmet>\n\n      <LoginView />\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Alert from '@mui/material/Alert';\nimport Link from '@mui/material/Link';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Stack from '@mui/material/Stack';\n// routes\nimport { useRouter } from 'src/routes/hooks';\nimport { paths } from 'src/routes/paths';\n// config\nimport { PATH_AFTER_LOGIN, SOCKET_KEY } from 'src/config-global';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\nimport useLocales from 'src/locales/use-locales';\n\nimport { useDispatch } from 'src/store';\nimport { signin } from 'src/store/reducers/auth';\n\n// components\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\nimport { useSnackbar } from 'src/components/snackbar';\nimport { RouterLink } from 'src/routes/components';\nimport Iconify from 'src/components/iconify';\nimport Logo from 'src/components/logo';\n\nimport useSocket from 'src/hooks/use-socket';\n\n// ----------------------------------------------------------------------\n\nexport default function LoginView() {\n  const router = useRouter();\n  const { t } = useLocales();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { sendSocket, lastJsonMessage } = useSocket();\n\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const confirmPassword = useBoolean();\n\n  const LoginSchema = Yup.object().shape({\n    name: Yup.string().required('Nick Name / Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const defaultValues = {\n    name: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(LoginSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      const { name, password } = data;\n      sendSocket({\n        key: SOCKET_KEY.LOGIN,\n        name,\n        password,\n      });\n    } catch (error) {\n      console.error(error);\n      reset();\n      setErrorMsg(typeof error === 'string' ? error : error.message);\n    }\n  });\n\n  useEffect(() => {\n    if (!lastJsonMessage) return;\n    const { key, data } = lastJsonMessage;\n    if (key !== SOCKET_KEY.LOGIN_RES || !data) return;\n    const { result, user, error } = data;\n    if (error) {\n      setErrorMsg(error);\n      return;\n    }\n    if (!result || !user) return;\n    dispatch(signin({ user, token: 'token' }));\n    enqueueSnackbar(t('message.welcome'));\n    console.log('ðŸš€ ~ useEffect ~ lastJsonMessage:', lastJsonMessage);\n    router.push(PATH_AFTER_LOGIN);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastJsonMessage]);\n\n  const renderHead = (\n    <Stack spacing={2} sx={{ mb: 5, alignItems: 'center' }}>\n      <Logo sx={{ width: 100 }} />\n    </Stack>\n  );\n\n  const renderForm = (\n    <Stack spacing={2.5} height={1} position=\"relative\">\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n\n      <RHFTextField\n        name=\"name\"\n        label={t('label.nick_email')}\n        variant=\"standard\"\n        sx={{ fontSize: 26 }}\n      />\n\n      <RHFTextField\n        name=\"password\"\n        label={t('label.password')}\n        variant=\"standard\"\n        type={confirmPassword.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={confirmPassword.onToggle} edge=\"end\">\n                <Iconify\n                  icon={confirmPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}\n                />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <Stack sx={{ alignItems: 'center', gap: 3, position: 'absolute', width: 1, bottom: 80 }}>\n        <LoadingButton\n          fullWidth\n          color=\"inherit\"\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{\n            height: 50,\n            maxWidth: 300,\n            backgroundSize: 'cover',\n            backgroundImage: 'url(../../assets/pokerking/button/button1.png)',\n          }}\n          loading={isSubmitting}\n        >\n          {t('button.login')}\n        </LoadingButton>\n        <Link component={RouterLink} href={paths.auth.register} variant=\"subtitle2\">\n          {t('label.create_an_account')}\n        </Link>\n      </Stack>\n    </Stack>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit} style={{ height: '100%' }}>\n      {renderHead}\n      {renderForm}\n    </FormProvider>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Alert from '@mui/material/Alert';\nimport Link from '@mui/material/Link';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Stack from '@mui/material/Stack';\n// routes\nimport { useRouter } from 'src/routes/hooks';\nimport { paths } from 'src/routes/paths';\n// config\nimport { PATH_AFTER_LOGIN, SOCKET_KEY } from 'src/config-global';\n// hooks\nimport useSocket from 'src/hooks/use-socket';\nimport useLocales from 'src/locales/use-locales';\nimport { useBoolean } from 'src/hooks/use-boolean';\n\n// auth\nimport { useDispatch } from 'src/store';\nimport { signin } from 'src/store/reducers/auth';\n\n// components\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\nimport { useSnackbar } from 'src/components/snackbar';\nimport { RouterLink } from 'src/routes/components';\nimport Iconify from 'src/components/iconify';\nimport Logo from 'src/components/logo';\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterView() {\n  const router = useRouter();\n  const { t } = useLocales();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { sendSocket, lastJsonMessage } = useSocket();\n\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const confirmPassword = useBoolean();\n\n  const LoginSchema = Yup.object().shape({\n    name: Yup.string().min(4).required('Nick Name is required'),\n    agent_code: Yup.number().min(0).required('Agent Code is required'),\n    email: Yup.string().required('Email is required'),\n    password: Yup.string()\n      .min(6)\n      .matches(/[A-z]/, 'Must contain at least one letter')\n      .matches(/[0-9]/, 'Must contain at least one number')\n      .required('Password is required'),\n  });\n\n  const defaultValues = {\n    name: '',\n    agent_code: 0,\n    email: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(LoginSchema),\n    defaultValues,\n  });\n\n  const {\n    watch,\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      const { name, email, agent_code, password } = data;\n      sendSocket({\n        key: SOCKET_KEY.REGISTER,\n        name,\n        email,\n        agent_code,\n        password,\n      });\n    } catch (error) {\n      console.error(error);\n      reset();\n      setErrorMsg(typeof error === 'string' ? error : error.message);\n    }\n  });\n\n  useEffect(() => {\n    if (!lastJsonMessage) return;\n    const { key, data } = lastJsonMessage;\n    if (key !== SOCKET_KEY.REGISTER_RES || !data) return;\n    const { result, user, error } = data;\n    console.log('ðŸš€ ~ useEffect ~ data:', data);\n    if (error) {\n      setErrorMsg(error);\n      return;\n    }\n    if (!result || !user) return;\n    dispatch(signin({ user, token: 'token' }));\n    console.log('succss');\n\n    enqueueSnackbar(t('message.welcome'));\n    router.push(PATH_AFTER_LOGIN);\n  }, [lastJsonMessage, router, dispatch, enqueueSnackbar, t]);\n\n  useEffect(() => {\n    setErrorMsg('');\n  }, [watch]);\n\n  const renderHead = (\n    <Stack spacing={2} sx={{ mb: 3, alignItems: 'center' }}>\n      <Logo sx={{ width: 100 }} />\n    </Stack>\n  );\n\n  const renderForm = (\n    <Stack spacing={1} height={1} position=\"relative\">\n      {!!errorMsg && <Alert severity=\"error\">{t(`message.${errorMsg}`)}</Alert>}\n\n      <RHFTextField name=\"name\" label={t('label.nick')} variant=\"standard\" sx={{ fontSize: 26 }} />\n\n      <RHFTextField\n        name=\"email\"\n        label={t('label.email')}\n        variant=\"standard\"\n        sx={{ fontSize: 26 }}\n      />\n      <RHFTextField\n        type=\"number\"\n        inputProps={{ min: 0 }}\n        name=\"agent_code\"\n        label={t('label.agent_code')}\n        variant=\"standard\"\n        sx={{ fontSize: 26 }}\n      />\n\n      <RHFTextField\n        name=\"password\"\n        label={t('label.password')}\n        variant=\"standard\"\n        type={confirmPassword.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={confirmPassword.onToggle} edge=\"end\">\n                <Iconify\n                  icon={confirmPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}\n                />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <Stack sx={{ alignItems: 'center', gap: 3, position: 'absolute', width: 1, bottom: 50 }}>\n        <LoadingButton\n          fullWidth\n          color=\"inherit\"\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{\n            height: 50,\n            maxWidth: 300,\n            backgroundSize: 'cover',\n            backgroundImage: 'url(../../assets/pokerking/button/button1.png)',\n          }}\n          loading={isSubmitting}\n        >\n          {t('label.register')}\n        </LoadingButton>\n        <Link component={RouterLink} href={paths.auth.login} variant=\"subtitle2\">\n          {t('label.signin')}\n        </Link>\n      </Stack>\n    </Stack>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit} style={{ height: '100%' }}>\n      {renderHead}\n      {renderForm}\n    </FormProvider>\n  );\n}\n"],"names":["LoginPage","_jsxs","_Fragment","children","_jsx","Helmet","LoginView","router","useRouter","t","useLocales","dispatch","useDispatch","enqueueSnackbar","useSnackbar","_useSocket","useSocket","sendSocket","lastJsonMessage","_useState","useState","_useState2","_slicedToArray","errorMsg","setErrorMsg","confirmPassword","useBoolean","LoginSchema","Yup","shape","name","required","password","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","isSubmitting","formState","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","key","SOCKET_KEY","LOGIN","error","console","message","stop","_x","apply","arguments","useEffect","LOGIN_RES","result","user","signin","token","log","push","PATH_AFTER_LOGIN","renderHead","Stack","spacing","sx","mb","alignItems","Logo","width","renderForm","height","position","Alert","severity","RHFTextField","label","variant","fontSize","type","value","InputProps","endAdornment","InputAdornment","IconButton","onClick","onToggle","edge","Iconify","icon","gap","bottom","LoadingButton","fullWidth","color","size","maxWidth","backgroundSize","backgroundImage","loading","Link","component","RouterLink","href","paths","auth","register","FormProvider","style","RegisterView","min","agent_code","email","matches","watch","REGISTER","REGISTER_RES","concat","inputProps","login"],"sourceRoot":""}